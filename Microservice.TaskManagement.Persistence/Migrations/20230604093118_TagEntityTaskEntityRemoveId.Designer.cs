// <auto-generated />
using System;
using System.Collections.Generic;
using Microservice.TaskManagement.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Microservice.TaskManagement.Persistence.Migrations
{
    [DbContext(typeof(TaskManagementContext))]
    [Migration("20230604093118_TagEntityTaskEntityRemoveId")]
    partial class TagEntityTaskEntityRemoveId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microservice.TaskManagement.Domain.Entities.StatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2023, 6, 4, 12, 31, 18, 39, DateTimeKind.Local).AddTicks(2854));

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<List<Nullable<int>>>("TaskIds")
                        .HasColumnType("integer[]");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Microservice.TaskManagement.Domain.Entities.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2023, 6, 4, 12, 31, 18, 35, DateTimeKind.Local).AddTicks(3687));

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Microservice.TaskManagement.Domain.Entities.TagEntityTaskEntity", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasKey("TagId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TagTasks");
                });

            modelBuilder.Entity("Microservice.TaskManagement.Domain.Entities.TaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssignedToUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2023, 6, 4, 12, 31, 18, 39, DateTimeKind.Local).AddTicks(3562));

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Microservice.TaskManagement.Domain.Entities.TagEntityTaskEntity", b =>
                {
                    b.HasOne("Microservice.TaskManagement.Domain.Entities.TagEntity", "Tag")
                        .WithMany("TagEntityTaskEntities")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microservice.TaskManagement.Domain.Entities.TaskEntity", "Task")
                        .WithMany("TagEntityTaskEntities")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Microservice.TaskManagement.Domain.Entities.TaskEntity", b =>
                {
                    b.HasOne("Microservice.TaskManagement.Domain.Entities.StatusEntity", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Microservice.TaskManagement.Domain.Entities.StatusEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Microservice.TaskManagement.Domain.Entities.TagEntity", b =>
                {
                    b.Navigation("TagEntityTaskEntities");
                });

            modelBuilder.Entity("Microservice.TaskManagement.Domain.Entities.TaskEntity", b =>
                {
                    b.Navigation("TagEntityTaskEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
